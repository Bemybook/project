
AVRASM ver. 2.1.2  page.asm Mon Jun 28 16:38:08 2021

page.asm(992): Including file 'page.vec'
page.asm(993): Including file 'page.inc'
page.inc(2): warning: Register r2 already defined by the .DEF directive
page.asm(993): 'page.inc' included form here
page.inc(3): warning: Register r4 already defined by the .DEF directive
page.asm(993): 'page.inc' included form here
page.inc(4): warning: Register r5 already defined by the .DEF directive
page.asm(993): 'page.inc' included form here
page.inc(5): warning: Register r6 already defined by the .DEF directive
page.asm(993): 'page.inc' included form here
page.inc(6): warning: Register r7 already defined by the .DEF directive
page.asm(993): 'page.inc' included form here
page.inc(7): warning: Register r8 already defined by the .DEF directive
page.asm(993): 'page.inc' included form here
page.inc(8): warning: Register r9 already defined by the .DEF directive
page.asm(993): 'page.inc' included form here
page.inc(9): warning: Register r10 already defined by the .DEF directive
page.asm(993): 'page.inc' included form here
page.inc(10): warning: Register r11 already defined by the .DEF directive
page.asm(993): 'page.inc' included form here
page.inc(11): warning: Register r12 already defined by the .DEF directive
page.asm(993): 'page.inc' included form here
                 
                 
                 ;CodeVisionAVR C Compiler V1.24.8d Professional
                 ;(C) Copyright 1998-2006 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega48
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External SRAM size     : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : Yes
                 ;8 bit enums            : No
                 ;Word align FLASH struct: No
                 ;Enhanced core instructions    : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega48
                 	#pragma AVRPART MEMORY PROG_FLASH 4096
                 	#pragma AVRPART MEMORY EEPROM 256
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 	.EQU GPIOR1=0x2A
                 	.EQU GPIOR2=0x2B
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0
                 
                 	.INCLUDE "page.vec"
                 
                 ;INTERRUPT VECTORS
000000 c038      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 c05f      	RJMP _usart_rx_isr
000013 cfec      	RJMP 0x00
000014 c084      	RJMP _usart_tx_isr
000015 cfea      	RJMP 0x00
000016 cfe9      	RJMP 0x00
000017 cfe8      	RJMP 0x00
000018 cfe7      	RJMP 0x00
000019 cfe6      	RJMP 0x00
                 
                 	.INCLUDE "page.inc"
                 
                 	.DEF _i=R2
                 	.DEF _maths=R4
                 	.DEF _science=R5
                 	.DEF _start=R6
                 	.DEF _rx_wr_index0=R7
                 	.DEF _rx_rd_index0=R8
                 	.DEF _rx_counter0=R9
                 	.DEF _tx_wr_index0=R10
                 	.DEF _tx_rd_index0=R11
                 	.DEF _tx_counter0=R12
                 _0:
00001a 4150
00001b 4547
00001c 5420
00001d 5255      	.DB  0x50,0x41,0x47,0x45,0x20,0x54,0x55,0x52
00001e 454e
00001f 0052
000020 2020
000021 5541      	.DB  0x4E,0x45,0x52,0x0,0x20,0x20,0x41,0x55
000022 4f54
000023 414d
000024 4954
000025 2043      	.DB  0x54,0x4F,0x4D,0x41,0x54,0x49,0x43,0x20
000026 5000
000027 4f52
000028 4543
000029 5353      	.DB  0x0,0x50,0x52,0x4F,0x43,0x45,0x53,0x53
00002a 5320
00002b 4154
00002c 5452
00002d 4445      	.DB  0x20,0x53,0x54,0x41,0x52,0x54,0x45,0x44
page.inc(18): warning: .cseg .db misalignment - padding zero byte
page.asm(993): 'page.inc' included form here
00002e 0000      	.DB  0x0
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
                 	.EQU  __GPIOR0_INIT=0x00
                 	.EQU  __GPIOR1_INIT=0x00
                 	.EQU  __GPIOR2_INIT=0x00
                 
                 __GLOBAL_INI_TBL:
00002f 000c      	.DW  0x0C
000030 0180      	.DW  _st
000031 0034      	.DW  _0*2
                 
000032 000d      	.DW  0x0D
000033 018c      	.DW  _st0
000034 0040      	.DW  _0*2+0x0C
                 
000035 0010      	.DW  0x10
000036 0199      	.DW  _st2
000037 004d      	.DW  _0*2+0x19
                 
000038 0000      	.DW  0
                 _0x25:
                 
                 __RESET:
000039 94f8      	CLI
00003a 27ee      	CLR  R30
00003b bbef      	OUT  EECR,R30
00003c bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00003d e1f8      	LDI  R31,0x18
00003e 95a8      	WDR
00003f b7a4      	IN   R26,MCUSR
000040 7fa7      	CBR  R26,8
000041 bfa4      	OUT  MCUSR,R26
000042 93f0 0060 	STS  WDTCSR,R31
000044 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000046 e08d      	LDI  R24,13
000047 e0a2      	LDI  R26,2
000048 27bb      	CLR  R27
                 __CLEAR_REG:
000049 93ed      	ST   X+,R30
00004a 958a      	DEC  R24
00004b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004c e080      	LDI  R24,LOW(0x200)
00004d e092      	LDI  R25,HIGH(0x200)
00004e e0a0      	LDI  R26,LOW(0x100)
00004f e0b1      	LDI  R27,HIGH(0x100)
                 __CLEAR_SRAM:
000050 93ed      	ST   X+,R30
000051 9701      	SBIW R24,1
000052 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000053 e5ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000054 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000055 9185      	LPM  R24,Z+
000056 9195      	LPM  R25,Z+
000057 9700      	SBIW R24,0
000058 f061      	BREQ __GLOBAL_INI_END
000059 91a5      	LPM  R26,Z+
00005a 91b5      	LPM  R27,Z+
00005b 9005      	LPM  R0,Z+
00005c 9015      	LPM  R1,Z+
00005d 01bf      	MOVW R22,R30
00005e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005f 9005      	LPM  R0,Z+
000060 920d      	ST   X+,R0
000061 9701      	SBIW R24,1
000062 f7e1      	BRNE __GLOBAL_INI_LOOP
000063 01fb      	MOVW R30,R22
000064 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
000065 e0e0      	LDI  R30,__GPIOR0_INIT
000066 bbee      	OUT  GPIOR0,R30
000067 e0e0      	LDI  R30,__GPIOR1_INIT
000068 bdea      	OUT  GPIOR1,R30
000069 e0e0      	LDI  R30,__GPIOR2_INIT
00006a bdeb      	OUT  GPIOR2,R30
                 
                 ;STACK POINTER INITIALIZATION
00006b efef      	LDI  R30,LOW(0x2FF)
00006c bfed      	OUT  SPL,R30
00006d e0e2      	LDI  R30,HIGH(0x2FF)
00006e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006f e8c0      	LDI  R28,LOW(0x180)
000070 e0d1      	LDI  R29,HIGH(0x180)
                 
000071 c060      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x180
                 ;       1 #include <mega48.h> 
                 ;       2 #include <lcd16x1.h> 
                 ;       3 #include<delay.h>
                 ;       4 #include<stdlib.h>
                 ;       5 #include<string.h>
                 ;       6 
                 ;       7 #define RXB8 1
                 ;       8 #define TXB8 0
                 ;       9 #define UPE 2
                 ;      10 #define OVR 3
                 ;      11 #define FE 4
                 ;      12 #define UDRE 5
                 ;      13 #define RXC 7
                 ;      14 
                 ;      15 #define FRAMING_ERROR (1<<FE)
                 ;      16 #define PARITY_ERROR (1<<UPE)
                 ;      17 #define DATA_OVERRUN (1<<OVR)
                 ;      18 #define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;      19 #define RX_COMPLETE (1<<RXC) 
                 ;      20 
                 ;      21 unsigned int i;
                 ;      22 unsigned char st[]="PAGE TURNER",maths,science,start,st0[]="  AUTOMATIC ",st2[]="PROCESS STARTED";
                 _st:
000180           	.BYTE 0xC
                 _st0:
00018c           	.BYTE 0xD
                 _st2:
000199           	.BYTE 0x10
                 ;      23 
                 ;      24 // USART Receiver buffer
                 ;      25 #define RX_BUFFER_SIZE0 8
                 ;      26 char rx_buffer0[RX_BUFFER_SIZE0];
                 _rx_buffer0:
0001a9           	.BYTE 0x8
                 ;      27 
                 ;      28 #if RX_BUFFER_SIZE0<256
                 ;      29 unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;      30 #else
                 ;      31 unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;      32 #endif
                 ;      33 
                 ;      34 // This flag is set on USART Receiver buffer overflow
                 ;      35 bit rx_buffer_overflow0;
                 ;      36 
                 ;      37 // USART Receiver interrupt service routine
                 ;      38 interrupt [USART_RXC] void usart_rx_isr(void)
                 ;      39 {
                 
                 	.CSEG
                 _usart_rx_isr:
000072 93aa      	ST   -Y,R26
000073 93ba      	ST   -Y,R27
000074 93ea      	ST   -Y,R30
000075 b7ef      	IN   R30,SREG
000076 93ea      	ST   -Y,R30
                 ;      40 char status,data;
                 ;      41 status=UCSR0A;
000077 d1bd      	RCALL __SAVELOCR2
                 ;	status -> R16
                 ;	data -> R17
000078 9100 00c0 	LDS  R16,192
                 ;      42 data=UDR0;
00007a 9110 00c6 	LDS  R17,198
                 ;      43 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00007c 2fe0      	MOV  R30,R16
00007d 71ec      	ANDI R30,LOW(0x1C)
00007e f009      	BREQ PC+2
00007f c012      	RJMP _0x3
                 ;      44    {
                 ;      45    rx_buffer0[rx_wr_index0]=data;
000080 2da7      	MOV  R26,R7
000081 e0b0      	LDI  R27,0
000082 55a7      	SUBI R26,LOW(-_rx_buffer0)
000083 4fbe      	SBCI R27,HIGH(-_rx_buffer0)
000084 931c      	ST   X,R17
                 ;      46    if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
000085 9473      	INC  R7
000086 e0e8      	LDI  R30,LOW(8)
000087 15e7      	CP   R30,R7
000088 f009      	BREQ PC+2
000089 c001      	RJMP _0x4
00008a 2477      	CLR  R7
                 ;      47    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x4:
00008b 9493      	INC  R9
00008c e0e8      	LDI  R30,LOW(8)
00008d 15e9      	CP   R30,R9
00008e f009      	BREQ PC+2
00008f c002      	RJMP _0x5
                 ;      48       {
                 ;      49       rx_counter0=0;
000090 2499      	CLR  R9
                 ;      50       rx_buffer_overflow0=1;
000091 9af0      	SBI  0x1E,0
                 ;      51       };
                 _0x5:
                 ;      52    };
                 _0x3:
                 ;      53 }
000092 d1aa      	RCALL __LOADLOCR2P
000093 91e9      	LD   R30,Y+
000094 bfef      	OUT  SREG,R30
000095 91e9      	LD   R30,Y+
000096 91b9      	LD   R27,Y+
000097 91a9      	LD   R26,Y+
000098 9518      	RETI
                 ;      54 
                 ;      55 #ifndef _DEBUG_TERMINAL_IO_
                 ;      56 // Get a character from the USART Receiver buffer
                 ;      57 #define _ALTERNATE_GETCHAR_
                 ;      58 #pragma used+
                 ;      59 char getchar(void)
                 ;      60 {
                 ;      61 char data;
                 ;      62 while (rx_counter0==0);
                 ;	data -> R16
                 ;      63 data=rx_buffer0[rx_rd_index0];
                 ;      64 if (++rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ;      65 #asm("cli")
                 ;      66 --rx_counter0;
                 ;      67 #asm("sei")
                 ;      68 return data;
                 ;      69 }
                 ;      70 #pragma used-
                 ;      71 #endif
                 ;      72 
                 ;      73 // USART Transmitter buffer
                 ;      74 #define TX_BUFFER_SIZE0 8
                 ;      75 char tx_buffer0[TX_BUFFER_SIZE0];
                 
                 	.DSEG
                 _tx_buffer0:
0001b1           	.BYTE 0x8
                 ;      76 
                 ;      77 #if TX_BUFFER_SIZE0<256
                 ;      78 unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;      79 #else
                 ;      80 unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;      81 #endif
                 ;      82 
                 ;      83 // USART Transmitter interrupt service routine
                 ;      84 interrupt [USART_TXC] void usart_tx_isr(void)
                 ;      85 {
                 
                 	.CSEG
                 _usart_tx_isr:
000099 93ea      	ST   -Y,R30
00009a 93fa      	ST   -Y,R31
00009b b7ef      	IN   R30,SREG
00009c 93ea      	ST   -Y,R30
                 ;      86 if (tx_counter0)
00009d 20cc      	TST  R12
00009e f409      	BRNE PC+2
00009f c00c      	RJMP _0xA
                 ;      87    {
                 ;      88    --tx_counter0;
0000a0 94ca      	DEC  R12
                 ;      89    UDR0=tx_buffer0[tx_rd_index0];
0000a1 2deb      	MOV  R30,R11
0000a2 d145      	RCALL SUBOPT_0x0
0000a3 81e0      	LD   R30,Z
0000a4 93e0 00c6 	STS  198,R30
                 ;      90    if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0000a6 94b3      	INC  R11
0000a7 e0e8      	LDI  R30,LOW(8)
0000a8 15eb      	CP   R30,R11
0000a9 f009      	BREQ PC+2
0000aa c001      	RJMP _0xB
0000ab 24bb      	CLR  R11
                 ;      91    };
                 _0xB:
                 _0xA:
                 ;      92 }
0000ac 91e9      	LD   R30,Y+
0000ad bfef      	OUT  SREG,R30
0000ae 91f9      	LD   R31,Y+
0000af 91e9      	LD   R30,Y+
0000b0 9518      	RETI
                 ;      93 
                 ;      94 #ifndef _DEBUG_TERMINAL_IO_
                 ;      95 // Write a character to the USART Transmitter buffer
                 ;      96 #define _ALTERNATE_PUTCHAR_
                 ;      97 #pragma used+
                 ;      98 void putchar(char c)
                 ;      99 {
                 _putchar:
                 ;     100 while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0xC:
0000b1 e0e8      	LDI  R30,LOW(8)
0000b2 15ec      	CP   R30,R12
0000b3 f009      	BREQ PC+2
0000b4 c001      	RJMP _0xE
0000b5 cffb      	RJMP _0xC
                 _0xE:
                 ;     101 #asm("cli")
0000b6 94f8      	cli
                 ;     102 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
0000b7 20cc      	TST  R12
0000b8 f009      	BREQ PC+2
0000b9 c006      	RJMP _0x10
0000ba 91e0 00c0 	LDS  R30,192
0000bc 72e0      	ANDI R30,LOW(0x20)
0000bd f409      	BRNE PC+2
0000be c001      	RJMP _0x10
0000bf c00c      	RJMP _0xF
                 _0x10:
                 ;     103    {
                 ;     104    tx_buffer0[tx_wr_index0]=c;
0000c0 2dea      	MOV  R30,R10
0000c1 d126      	RCALL SUBOPT_0x0
0000c2 81a8      	LD   R26,Y
0000c3 83a0      	STD  Z+0,R26
                 ;     105    if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
0000c4 94a3      	INC  R10
0000c5 e0e8      	LDI  R30,LOW(8)
0000c6 15ea      	CP   R30,R10
0000c7 f009      	BREQ PC+2
0000c8 c001      	RJMP _0x12
0000c9 24aa      	CLR  R10
                 ;     106    ++tx_counter0;
                 _0x12:
0000ca 94c3      	INC  R12
                 ;     107    }
                 ;     108 else
0000cb c003      	RJMP _0x13
                 _0xF:
                 ;     109    UDR0=c;
0000cc 81e8      	LD   R30,Y
0000cd 93e0 00c6 	STS  198,R30
                 ;     110 #asm("sei")
                 _0x13:
0000cf 9478      	sei
                 ;     111 }
0000d0 9621      	ADIW R28,1
0000d1 9508      	RET
                 ;     112 #pragma used-
                 ;     113 #endif
                 ;     114 
                 ;     115 // Standard Input/Output functions
                 ;     116 #include <stdio.h>
                 ;     117 
                 ;     118 // Declare your global variables here
                 ;     119 
                 ;     120 void main(void)
                 ;     121 {
                 _main:
                 ;     122 // Declare your local variables here
                 ;     123 
                 ;     124 // Crystal Oscillator division factor: 1
                 ;     125 #pragma optsize-
                 ;     126 CLKPR=0x80;
0000d2 e8e0      	LDI  R30,LOW(128)
0000d3 93e0 0061 	STS  97,R30
                 ;     127 CLKPR=0x00;
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 93e0 0061 	STS  97,R30
                 ;     128 #ifdef _OPTIMIZE_SIZE_
                 ;     129 #pragma optsize+
                 ;     130 #endif
                 ;     131 
                 ;     132 // Input/Output Ports initialization
                 ;     133 // Port B initialization
                 ;     134 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
                 ;     135 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
                 ;     136 PORTB=0x00;
0000d8 b9e5      	OUT  0x5,R30
                 ;     137 DDRB=0x07;
0000d9 e0e7      	LDI  R30,LOW(7)
0000da b9e4      	OUT  0x4,R30
                 ;     138 
                 ;     139 // Port C initialization
                 ;     140 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
                 ;     141 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
                 ;     142 PORTC=0x00;
0000db e0e0      	LDI  R30,LOW(0)
0000dc b9e8      	OUT  0x8,R30
                 ;     143 DDRC=0x0f;
0000dd e0ef      	LDI  R30,LOW(15)
0000de b9e7      	OUT  0x7,R30
                 ;     144 
                 ;     145 // Port D initialization
                 ;     146 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
                 ;     147 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
                 ;     148 PORTD=0x0c;
0000df e0ec      	LDI  R30,LOW(12)
0000e0 b9eb      	OUT  0xB,R30
                 ;     149 DDRD=0xf0;
0000e1 efe0      	LDI  R30,LOW(240)
0000e2 b9ea      	OUT  0xA,R30
                 ;     150 
                 ;     151 // Timer/Counter 0 initialization
                 ;     152 // Clock source: System Clock
                 ;     153 // Clock value: Timer 0 Stopped
                 ;     154 // Mode: Normal top=FFh
                 ;     155 // OC0A output: Disconnected
                 ;     156 // OC0B output: Disconnected
                 ;     157 TCCR0A=0x00;
0000e3 e0e0      	LDI  R30,LOW(0)
0000e4 bde4      	OUT  0x24,R30
                 ;     158 TCCR0B=0x00;
0000e5 bde5      	OUT  0x25,R30
                 ;     159 TCNT0=0x00;
0000e6 bde6      	OUT  0x26,R30
                 ;     160 OCR0A=0x00;
0000e7 bde7      	OUT  0x27,R30
                 ;     161 OCR0B=0x00;
0000e8 bde8      	OUT  0x28,R30
                 ;     162 
                 ;     163 // Timer/Counter 1 initialization
                 ;     164 // Clock source: System Clock
                 ;     165 // Clock value: Timer 1 Stopped
                 ;     166 // Mode: Normal top=FFFFh
                 ;     167 // OC1A output: Discon.
                 ;     168 // OC1B output: Discon.
                 ;     169 // Noise Canceler: Off
                 ;     170 // Input Capture on Falling Edge
                 ;     171 // Timer 1 Overflow Interrupt: Off
                 ;     172 // Input Capture Interrupt: Off
                 ;     173 // Compare A Match Interrupt: Off
                 ;     174 // Compare B Match Interrupt: Off
                 ;     175 TCCR1A=0x00;
0000e9 93e0 0080 	STS  128,R30
                 ;     176 TCCR1B=0x00;
0000eb 93e0 0081 	STS  129,R30
                 ;     177 TCNT1H=0x00;
0000ed 93e0 0085 	STS  133,R30
                 ;     178 TCNT1L=0x00;
0000ef 93e0 0084 	STS  132,R30
                 ;     179 ICR1H=0x00;
0000f1 93e0 0087 	STS  135,R30
                 ;     180 ICR1L=0x00;
0000f3 93e0 0086 	STS  134,R30
                 ;     181 OCR1AH=0x00;
0000f5 93e0 0089 	STS  137,R30
                 ;     182 OCR1AL=0x00;
0000f7 93e0 0088 	STS  136,R30
                 ;     183 OCR1BH=0x00;
0000f9 93e0 008b 	STS  139,R30
                 ;     184 OCR1BL=0x00;
0000fb 93e0 008a 	STS  138,R30
                 ;     185 
                 ;     186 // Timer/Counter 2 initialization
                 ;     187 // Clock source: System Clock
                 ;     188 // Clock value: Timer 2 Stopped
                 ;     189 // Mode: Normal top=FFh
                 ;     190 // OC2A output: Disconnected
                 ;     191 // OC2B output: Disconnected
                 ;     192 ASSR=0x00;
0000fd 93e0 00b6 	STS  182,R30
                 ;     193 TCCR2A=0x00;
0000ff 93e0 00b0 	STS  176,R30
                 ;     194 TCCR2B=0x00;
000101 93e0 00b1 	STS  177,R30
                 ;     195 TCNT2=0x00;
000103 93e0 00b2 	STS  178,R30
                 ;     196 OCR2A=0x00;
000105 93e0 00b3 	STS  179,R30
                 ;     197 OCR2B=0x00;
000107 93e0 00b4 	STS  180,R30
                 ;     198 
                 ;     199 // External Interrupt(s) initialization
                 ;     200 // INT0: Off
                 ;     201 // INT1: Off
                 ;     202 // Interrupt on any change on pins PCINT0-7: Off
                 ;     203 // Interrupt on any change on pins PCINT8-14: Off
                 ;     204 // Interrupt on any change on pins PCINT16-23: Off
                 ;     205 EICRA=0x00;
000109 93e0 0069 	STS  105,R30
                 ;     206 EIMSK=0x00;
00010b bbed      	OUT  0x1D,R30
                 ;     207 PCICR=0x00;
00010c 93e0 0068 	STS  104,R30
                 ;     208 
                 ;     209 // Timer/Counter 0 Interrupt(s) initialization
                 ;     210 TIMSK0=0x00;
00010e 93e0 006e 	STS  110,R30
                 ;     211 // Timer/Counter 1 Interrupt(s) initialization
                 ;     212 TIMSK1=0x00;
000110 93e0 006f 	STS  111,R30
                 ;     213 // Timer/Counter 2 Interrupt(s) initialization
                 ;     214 TIMSK2=0x00;
000112 93e0 0070 	STS  112,R30
                 ;     215 
                 ;     216 // USART initialization
                 ;     217 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ;     218 // USART Receiver: On
                 ;     219 // USART Transmitter: On
                 ;     220 // USART0 Mode: Asynchronous
                 ;     221 // USART Baud rate: 9600
                 ;     222 UCSR0A=0x00;
000114 93e0 00c0 	STS  192,R30
                 ;     223 UCSR0B=0xD8;
000116 ede8      	LDI  R30,LOW(216)
000117 93e0 00c1 	STS  193,R30
                 ;     224 UCSR0C=0x06;
000119 e0e6      	LDI  R30,LOW(6)
00011a 93e0 00c2 	STS  194,R30
                 ;     225 UBRR0H=0x00;
00011c e0e0      	LDI  R30,LOW(0)
00011d 93e0 00c5 	STS  197,R30
                 ;     226 UBRR0L=0x19;
00011f e1e9      	LDI  R30,LOW(25)
000120 93e0 00c4 	STS  196,R30
                 ;     227 
                 ;     228 // Analog Comparator initialization
                 ;     229 // Analog Comparator: Off
                 ;     230 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ;     231 ACSR=0x80;
000122 e8e0      	LDI  R30,LOW(128)
000123 bfe0      	OUT  0x30,R30
                 ;     232 ADCSRB=0x00;
000124 e0e0      	LDI  R30,LOW(0)
000125 93e0 007b 	STS  123,R30
                 ;     233 
                 ;     234 // Global enable interrupts
                 ;     235 #asm("sei")  
000127 9478      	sei
                 ;     236 lcd_init();
000128 d055      	RCALL _lcd_init
                 ;     237 clear_lcd();
000129 d0c2      	RCALL SUBOPT_0x1
                 ;     238 lcd_cmd(0x80);
                 ;     239  lcd_puts(st0); 
00012a e8ec      	LDI  R30,LOW(_st0)
00012b e0f1      	LDI  R31,HIGH(_st0)
00012c d0c3      	RCALL SUBOPT_0x2
                 ;     240  lcd_cmd(0xC0);
00012d ece0      	LDI  R30,LOW(192)
00012e d0c4      	RCALL SUBOPT_0x3
                 ;     241  lcd_puts(st); 
00012f e8e0      	LDI  R30,LOW(_st)
000130 e0f1      	LDI  R31,HIGH(_st)
000131 d0be      	RCALL SUBOPT_0x2
                 ;     242 delay_ms(2000); 
000132 d0c2      	RCALL SUBOPT_0x4
                 ;     243 if(PIND.2==0)
000133 994a      	SBIC 0x9,2
000134 c004      	RJMP _0x14
                 ;     244 {
                 ;     245 // putchar('A');  
                 ;     246 maths=1;
000135 e0e1      	LDI  R30,LOW(1)
000136 2e4e      	MOV  R4,R30
                 ;     247 science=0;
000137 2455      	CLR  R5
                 ;     248 }  
                 ;     249 else
000138 c003      	RJMP _0x15
                 _0x14:
                 ;     250 {
                 ;     251  maths=0;
000139 2444      	CLR  R4
                 ;     252 science=1;
00013a e0e1      	LDI  R30,LOW(1)
00013b 2e5e      	MOV  R5,R30
                 ;     253 } 
                 _0x15:
                 ;     254 
                 ;     255 // PORTC.1=0;  
                 ;     256 //  PORTC.2=1;
                 ;     257 //  delay_ms(1000);
                 ;     258 //  PORTC.1=0;  
                 ;     259 //  PORTC.2=0;
                 ;     260 
                 ;     261 while (1)
                 _0x16:
                 ;     262       {
                 ;     263       // Place your code here
                 ;     264       if(start==1)
00013c e0e1      	LDI  R30,LOW(1)
00013d 15e6      	CP   R30,R6
00013e f009      	BREQ PC+2
00013f c02a      	RJMP _0x19
                 ;     265       {
                 ;     266 //       if(maths==1)
                 ;     267 //       putchar('A'); 
                 ;     268 //       if(science==1)
                 ;     269 //       putchar('B'); 
                 ;     270       for(i=0;i<15;i++) 
000140 2422      	CLR  R2
000141 2433      	CLR  R3
                 _0x1B:
000142 e0ef      	LDI  R30,LOW(15)
000143 e0f0      	LDI  R31,HIGH(15)
000144 162e      	CP   R2,R30
000145 063f      	CPC  R3,R31
000146 f008      	BRLO PC+2
000147 c021      	RJMP _0x1C
                 ;     271       
                 ;     272       { 
                 ;     273        if(maths==1)
000148 e0e1      	LDI  R30,LOW(1)
000149 15e4      	CP   R30,R4
00014a f009      	BREQ PC+2
00014b c003      	RJMP _0x1D
                 ;     274       putchar('A'); 
00014c e4e1      	LDI  R30,LOW(65)
00014d 93ea      	ST   -Y,R30
00014e df62      	RCALL _putchar
                 ;     275       if(science==1)
                 _0x1D:
00014f e0e1      	LDI  R30,LOW(1)
000150 15e5      	CP   R30,R5
000151 f009      	BREQ PC+2
000152 c003      	RJMP _0x1E
                 ;     276       putchar('B'); 
000153 e4e2      	LDI  R30,LOW(66)
000154 93ea      	ST   -Y,R30
000155 df5b      	RCALL _putchar
                 ;     277  PORTC.0=1;
                 _0x1E:
000156 9a40      	SBI  0x8,0
                 ;     278  delay_ms(2000);
000157 d09d      	RCALL SUBOPT_0x4
                 ;     279  PORTC.1=1;  
000158 9a41      	SBI  0x8,1
                 ;     280  PORTC.2=0;
000159 9842      	CBI  0x8,2
                 ;     281  delay_ms(650);
00015a d09f      	RCALL SUBOPT_0x5
                 ;     282  PORTC.1=0;  
                 ;     283  PORTC.2=0; 
                 ;     284  PORTC.0=0; 
00015b 9840      	CBI  0x8,0
                 ;     285  delay_ms(1000);
00015c eee8      	LDI  R30,LOW(1000)
00015d e0f3      	LDI  R31,HIGH(1000)
00015e d0a3      	RCALL SUBOPT_0x6
                 ;     286  PORTC.1=0;  
00015f 9841      	CBI  0x8,1
                 ;     287  PORTC.2=1;
000160 9a42      	SBI  0x8,2
                 ;     288  delay_ms(650);
000161 d098      	RCALL SUBOPT_0x5
                 ;     289  PORTC.1=0;  
                 ;     290  PORTC.2=0;
                 ;     291  delay_ms(10000);
000162 e1e0      	LDI  R30,LOW(10000)
000163 e2f7      	LDI  R31,HIGH(10000)
000164 d09d      	RCALL SUBOPT_0x6
                 ;     292  }
                 _0x1A:
000165 01f1      	MOVW R30,R2
000166 9631      	ADIW R30,1
000167 011f      	MOVW R2,R30
000168 cfd9      	RJMP _0x1B
                 _0x1C:
                 ;     293    #asm
                 ;     294    rjmp 0x0000
000169 ce96         rjmp 0x0000
                 ;     295    #endasm
                 ;     296       } 
                 ;     297       
                 ;     298 if(PIND.3==0)
                 _0x19:
00016a 994b      	SBIC 0x9,3
00016b c00b      	RJMP _0x1F
                 ;     299 { 
                 ;     300 delay_ms(200);
00016c ece8      	LDI  R30,LOW(200)
00016d e0f0      	LDI  R31,HIGH(200)
00016e d093      	RCALL SUBOPT_0x6
                 ;     301 if(PIND.3==0)
00016f 994b      	SBIC 0x9,3
000170 c006      	RJMP _0x20
                 ;     302 {
                 ;     303 start=1;
000171 e0e1      	LDI  R30,LOW(1)
000172 2e6e      	MOV  R6,R30
                 ;     304 clear_lcd();
000173 d078      	RCALL SUBOPT_0x1
                 ;     305 lcd_cmd(0x80);
                 ;     306  lcd_puts(st2); 
000174 e9e9      	LDI  R30,LOW(_st2)
000175 e0f1      	LDI  R31,HIGH(_st2)
000176 d079      	RCALL SUBOPT_0x2
                 ;     307 } 
                 ;     308 }
                 _0x20:
                 ;     309       };
                 _0x1F:
000177 cfc4      	RJMP _0x16
                 _0x18:
                 ;     310 }
                 _0x21:
000178 cfff      	RJMP _0x21
                 ;     311  #include <mega48.h> 
                 ;     312   #include <delay.h>         
                 ;     313 //#include <prototype.h> 
                 ;     314 #include <lcd16x1.h> 
                 ;     315 #include <stdlib.h>
                 ;     316 #include <stdio.h>  
                 ;     317 //#include<prototype.h>     
                 ;     318 //#define INT0_PIN PIND.2         //int0 pin PD.2
                 ;     319 //#define INT1_PIN PIND.3         //int1 pin PD.3
                 ;     320 
                 ;     321 #define RS PORTB.0
                 ;     322 #define RW PORTB.1    //lcd defines
                 ;     323 #define EN PORTB.2  
                 ;     324                         
                 ;     325          
                 ;     326 
                 ;     327 //function to clear the lcd & start from first row first column onwards       
                 ;     328 void clear_lcd(void)
                 ;     329 {
                 _clear_lcd:
                 ;     330        lcd_cmd(0x01);
000179 e0e1      	LDI  R30,LOW(1)
00017a d078      	RCALL SUBOPT_0x3
                 ;     331        //lcd_cmd(0x80);   //clear screen n start from fist line first column
                 ;     332        lcd_cmd(0x06);     //incremental cursor
00017b e0e6      	LDI  R30,LOW(6)
00017c d076      	RCALL SUBOPT_0x3
                 ;     333 }
00017d 9508      	RET
                 ;     334 
                 ;     335 //lcd initialization function for 4 datalines    
                 ;     336  void lcd_init(void)
                 ;     337  {
                 _lcd_init:
                 ;     338         delay_ms(15);               //startup delay
00017e e0ef      	LDI  R30,LOW(15)
00017f e0f0      	LDI  R31,HIGH(15)
000180 d081      	RCALL SUBOPT_0x6
                 ;     339                   lcd_cmd(0x03);
000181 e0e3      	LDI  R30,LOW(3)
000182 d070      	RCALL SUBOPT_0x3
                 ;     340         delay_ms(5);     
000183 e0e5      	LDI  R30,LOW(5)
000184 e0f0      	LDI  R31,HIGH(5)
000185 d07c      	RCALL SUBOPT_0x6
                 ;     341                   lcd_cmd(0x03);
000186 e0e3      	LDI  R30,LOW(3)
000187 d06b      	RCALL SUBOPT_0x3
                 ;     342         delay_us(160);     
000188 d07c      	RCALL SUBOPT_0x7
                 ;     343                   lcd_cmd(0x03);
000189 e0e3      	LDI  R30,LOW(3)
00018a d068      	RCALL SUBOPT_0x3
                 ;     344         delay_us(160);            
00018b d079      	RCALL SUBOPT_0x7
                 ;     345                   lcd_cmd(0x02);
00018c e0e2      	LDI  R30,LOW(2)
00018d d065      	RCALL SUBOPT_0x3
                 ;     346        delay_us(160);  
00018e d076      	RCALL SUBOPT_0x7
                 ;     347                   lcd_cmd(0x28);         //4 bit data , 5*7, 2 line..   //the abouve cmds are necessary
00018f e2e8      	LDI  R30,LOW(40)
000190 d062      	RCALL SUBOPT_0x3
                 ;     348        delay_ms(100);                    
000191 e6e4      	LDI  R30,LOW(100)
000192 e0f0      	LDI  R31,HIGH(100)
000193 d06e      	RCALL SUBOPT_0x6
                 ;     349                   lcd_cmd(0x60);         // set CGRAM addr
000194 e6e0      	LDI  R30,LOW(96)
000195 d05d      	RCALL SUBOPT_0x3
                 ;     350        delay_ms(100);           
000196 e6e4      	LDI  R30,LOW(100)
000197 e0f0      	LDI  R31,HIGH(100)
000198 d069      	RCALL SUBOPT_0x6
                 ;     351          lcd_cmd(0x0C); 
000199 e0ec      	LDI  R30,LOW(12)
00019a d058      	RCALL SUBOPT_0x3
                 ;     352        delay_ms(1);                          
00019b d06d      	RCALL SUBOPT_0x8
                 ;     353                   lcd_cmd(0x06);       //increment cursor no shift
00019c e0e6      	LDI  R30,LOW(6)
00019d d055      	RCALL SUBOPT_0x3
                 ;     354        delay_ms(1);           
00019e d06a      	RCALL SUBOPT_0x8
                 ;     355                   lcd_cmd(0x90);       // 1st column 1st char
00019f e9e0      	LDI  R30,LOW(144)
0001a0 d052      	RCALL SUBOPT_0x3
                 ;     356         delay_ms(1);                                        
0001a1 d067      	RCALL SUBOPT_0x8
                 ;     357                   lcd_cmd(0x01);       //clear lcd
0001a2 e0e1      	LDI  R30,LOW(1)
0001a3 d04f      	RCALL SUBOPT_0x3
                 ;     358         delay_ms(2);                              
0001a4 e0e2      	LDI  R30,LOW(2)
0001a5 e0f0      	LDI  R31,HIGH(2)
0001a6 d05b      	RCALL SUBOPT_0x6
                 ;     359   }
0001a7 9508      	RET
                 ;     360   //to send lcd commands
                 ;     361 void lcd_cmd(unsigned char inst)
                 ;     362 {
                 _lcd_cmd:
                 ;     363 
                 ;     364        unsigned char lsb=0,msb=0;
                 ;     365         lsb=inst&0x0F;        //split msb n lsb nibbles
0001a8 d08c      	RCALL __SAVELOCR2
                 ;	inst -> Y+2
                 ;	lsb -> R16
                 ;	msb -> R17
0001a9 e000      	LDI  R16,0
0001aa e010      	LDI  R17,0
0001ab 81ea      	LDD  R30,Y+2
0001ac 70ef      	ANDI R30,LOW(0xF)
0001ad 2f0e      	MOV  R16,R30
                 ;     366         msb=inst>>4; 
0001ae 81ea      	LDD  R30,Y+2
0001af 95e2      	SWAP R30
0001b0 70ef      	ANDI R30,0xF
0001b1 2f1e      	MOV  R17,R30
                 ;     367         msb&=0x0F;   
0001b2 701f      	ANDI R17,LOW(15)
                 ;     368         lsb=lsb&0X0F;
0001b3 700f      	ANDI R16,LOW(15)
                 ;     369         msb=msb<<4;
0001b4 9512      	SWAP R17
0001b5 7f10      	ANDI R17,0xF0
                 ;     370         lsb=lsb<<4;
0001b6 9502      	SWAP R16
0001b7 7f00      	ANDI R16,0xF0
                 ;     371         delay_us(500);            //busy check duration       500
0001b8 ef84
0001b9 e091
0001ba 9701
0001bb f7f1      	__DELAY_USW 500
                 ;     372         RS=0;
0001bc 9828      	CBI  0x5,0
                 ;     373         RW=0;    
0001bd d04e      	RCALL SUBOPT_0x9
                 ;     374         EN=1;     
                 ;     375         PORTD&=0x0F; 
                 ;     376         PORTD|=msb; 
                 ;     377         delay_us(5);         //6 nops       changed from 10u to 5u
                 ;     378         EN=0;
                 ;     379         delay_us(5);         //6 nops
                 ;     380         EN=1;
                 ;     381         PORTD&=0x0F;        //sending lsb now       
                 ;     382         PORTD|=lsb; 
                 ;     383         delay_us(5);         //6 nops
                 ;     384         EN=0;
                 ;     385      }   
0001be d07b      	RCALL __LOADLOCR2
0001bf 9623      	ADIW R28,3
0001c0 9508      	RET
                 ;     386                
                 ;     387 //function to send data to lcd
                 ;     388  void lcd_data(unsigned char data1,unsigned char type)
                 ;     389  {      
                 _lcd_data:
                 ;     390       unsigned char lsbc,msbc,temp,a; 
                 ;     391       type=a;
0001c1 d071      	RCALL __SAVELOCR4
                 ;	data1 -> Y+5
                 ;	type -> Y+4
                 ;	lsbc -> R16
                 ;	msbc -> R17
                 ;	temp -> R18
                 ;	a -> R19
0001c2 833c      	STD  Y+4,R19
                 ;     392       temp=0;lsbc=0;msbc=0;
0001c3 e020      	LDI  R18,LOW(0)
0001c4 e000      	LDI  R16,LOW(0)
0001c5 e010      	LDI  R17,LOW(0)
                 ;     393       msbc=data1&0xF0;      //msb n lsb split
0001c6 81ed      	LDD  R30,Y+5
0001c7 7fe0      	ANDI R30,LOW(0xF0)
0001c8 2f1e      	MOV  R17,R30
                 ;     394       lsbc=data1<<4;
0001c9 81ed      	LDD  R30,Y+5
0001ca 95e2      	SWAP R30
0001cb 7fe0      	ANDI R30,0xF0
0001cc 2f0e      	MOV  R16,R30
                 ;     395       delay_us(600);            //busy check duration       prev 600
0001cd e588
0001ce e092
0001cf 9701
0001d0 f7f1      	__DELAY_USW 600
                 ;     396       RS=1;
0001d1 9a28      	SBI  0x5,0
                 ;     397       RW=0;     
0001d2 d039      	RCALL SUBOPT_0x9
                 ;     398       EN=1;
                 ;     399       PORTD&=0x0F; 
                 ;     400       PORTD|=msbc;         // this being moved to the lsbbits of port instead of msb...
                 ;     401       delay_us(5);        
                 ;     402       EN=0 ;                   
                 ;     403       delay_us(5);        
                 ;     404       EN=1;
                 ;     405       PORTD&=0x0F;
                 ;     406       PORTD|=lsbc;        
                 ;     407       delay_us(5);        
                 ;     408       EN=0;     
                 ;     409 } 
0001d3 d064      	RCALL __LOADLOCR4
0001d4 9626      	ADIW R28,6
0001d5 9508      	RET
                 ;     410             
                 ;     411  
                 ;     412 //function to put string onto lcd     
                 ;     413 void lcd_puts(unsigned char *str)
                 ;     414 {
                 _lcd_puts:
                 ;     415   while(*str !='\0') 
                 ;	*str -> Y+0
                 _0x22:
0001d6 81a8      	LD   R26,Y
0001d7 81b9      	LDD  R27,Y+1
0001d8 91ec      	LD   R30,X
0001d9 30e0      	CPI  R30,0
0001da f409      	BRNE PC+2
0001db c00a      	RJMP _0x24
                 ;     416          {
                 ;     417            lcd_data(*str,1);
0001dc 93ea      	ST   -Y,R30
0001dd e0e1      	LDI  R30,LOW(1)
0001de 93ea      	ST   -Y,R30
0001df dfe1      	RCALL _lcd_data
                 ;     418              *str++;
0001e0 81a8      	LD   R26,Y
0001e1 81b9      	LDD  R27,Y+1
0001e2 91ed      	LD   R30,X+
0001e3 83a8      	ST   Y,R26
0001e4 83b9      	STD  Y+1,R27
                 ;     419           }
0001e5 cff0      	RJMP _0x22
                 _0x24:
                 ;     420 }
0001e6 9622      	ADIW R28,2
0001e7 9508      	RET
                 ;     421 
                 ;     422 
                 ;     423 
                 ;     424 
                 ;     425 //function to convert int to ascii for dispaly on lcd / serial port          
                 ;     426 //  //calculate the ascii values to be displayed on lcd  3 digit int to 3 digit ascii
                 ;     427 // void cal_ascii(unsigned int value)   
                 ;     428 // { 
                 ;     429 //        unsigned char lb,mb,mmlb;
                 ;     430 //        mmlb=(((unsigned char)(value/100))|0x30);
                 ;     431 //        mb=(unsigned char)(value/10);  
                 ;     432 //        mb=(((unsigned char)(mb%10))|0x30);
                 ;     433 //        lb=(((unsigned char)(value%10))|0x30);
                 ;     434 //       
                 ;     435 //       if(value>99){ lcd_data(mmlb,1);lcd_data(mb,1);lcd_data(lb,1); }
                 ;     436 //       else if (value >9){lcd_data(mb,1);lcd_data(lb,1); }
                 ;     437 //       else 
                 ;     438 //       {   
                 ;     439 //       lcd_data(0x30,1);
                 ;     440 //       lcd_data(lb,1); 
                 ;     441 //       }
                 ;     442 // }                       
                 ;     443 
                 ;     444 
                 
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0001e8 e0f0      	LDI  R31,0
0001e9 54ef      	SUBI R30,LOW(-_tx_buffer0)
0001ea 4ffe      	SBCI R31,HIGH(-_tx_buffer0)
0001eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001ec df8c      	RCALL _clear_lcd
0001ed e8e0      	LDI  R30,LOW(128)
0001ee 93ea      	ST   -Y,R30
0001ef cfb8      	RJMP _lcd_cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0001f0 93fa      	ST   -Y,R31
0001f1 93ea      	ST   -Y,R30
0001f2 cfe3      	RJMP _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x3:
0001f3 93ea      	ST   -Y,R30
0001f4 cfb3      	RJMP _lcd_cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
0001f5 ede0      	LDI  R30,LOW(2000)
0001f6 e0f7      	LDI  R31,HIGH(2000)
0001f7 93fa      	ST   -Y,R31
0001f8 93ea      	ST   -Y,R30
0001f9 c02d      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0001fa e8ea      	LDI  R30,LOW(650)
0001fb e0f2      	LDI  R31,HIGH(650)
0001fc 93fa      	ST   -Y,R31
0001fd 93ea      	ST   -Y,R30
0001fe d028      	RCALL _delay_ms
0001ff 9841      	CBI  0x8,1
000200 9842      	CBI  0x8,2
000201 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x6:
000202 93fa      	ST   -Y,R31
000203 93ea      	ST   -Y,R30
000204 c022      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000205 ed85
000206 958a
000207 f7f1      	__DELAY_USB 213
000208 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
000209 e0e1      	LDI  R30,LOW(1)
00020a e0f0      	LDI  R31,HIGH(1)
00020b cff6      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x9:
00020c 9829      	CBI  0x5,1
00020d 9a2a      	SBI  0x5,2
00020e b1eb      	IN   R30,0xB
00020f 70ef      	ANDI R30,LOW(0xF)
000210 b9eb      	OUT  0xB,R30
000211 b1eb      	IN   R30,0xB
000212 2be1      	OR   R30,R17
000213 b9eb      	OUT  0xB,R30
000214 e087
000215 958a
000216 f7f1      	__DELAY_USB 7
000217 982a      	CBI  0x5,2
000218 e087
000219 958a
00021a f7f1      	__DELAY_USB 7
00021b 9a2a      	SBI  0x5,2
00021c b1eb      	IN   R30,0xB
00021d 70ef      	ANDI R30,LOW(0xF)
00021e b9eb      	OUT  0xB,R30
00021f b1eb      	IN   R30,0xB
000220 2be0      	OR   R30,R16
000221 b9eb      	OUT  0xB,R30
000222 e087
000223 958a
000224 f7f1      	__DELAY_USB 7
000225 982a      	CBI  0x5,2
000226 9508      	RET
                 
                 _delay_ms:
000227 91e9      	ld   r30,y+
000228 91f9      	ld   r31,y+
000229 9630      	adiw r30,0
00022a f039      	breq __delay_ms1
                 __delay_ms0:
00022b ee88
00022c e093
00022d 9701
00022e f7f1      	__DELAY_USW 0x3E8
00022f 95a8      	wdr
000230 9731      	sbiw r30,1
000231 f7c9      	brne __delay_ms0
                 __delay_ms1:
000232 9508      	ret
                 
                 __SAVELOCR4:
000233 933a      	ST   -Y,R19
                 __SAVELOCR3:
000234 932a      	ST   -Y,R18
                 __SAVELOCR2:
000235 931a      	ST   -Y,R17
000236 930a      	ST   -Y,R16
000237 9508      	RET
                 
                 __LOADLOCR4:
000238 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000239 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00023a 8119      	LDD  R17,Y+1
00023b 8108      	LD   R16,Y
00023c 9508      	RET
                 
                 __LOADLOCR2P:
00023d 9109      	LD   R16,Y+
00023e 9119      	LD   R17,Y+
00023f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega48 register use summary:
r0 :   4 r1 :   1 r2 :   4 r3 :   2 r4 :   3 r5 :   3 r6 :   2 r7 :   4 
r8 :   0 r9 :   3 r10:   4 r11:   4 r12:   5 r13:   0 r14:   0 r15:   0 
r16:  13 r17:  13 r18:   3 r19:   3 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  21 r25:   5 r26:  15 r27:  10 r28:   5 r29:   1 r30: 199 r31:  28 
x  :   6 y  :  53 z  :   9 
Registers used: 28 out of 35 (80.0%)

ATmega48 instruction use summary:
adc   :   0 add   :   0 adiw  :   6 and   :   0 andi  :  12 asr   :   0 
bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 
break :   0 breq  :  12 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 
brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 cbi   :   9 cbr   :   1 clc   :   0 clh   :   0 cli   :   2 
cln   :   0 clr   :  10 cls   :   0 clt   :   0 clv   :   0 clz   :   0 
com   :   0 cp    :   9 cpc   :   1 cpi   :   1 cpse  :   0 dec   :   6 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   5 ld    :  19 ldd   :   9 ldi   : 105 lds   :   3 
lpm   :   7 lsl   :   0 lsr   :   0 mov   :  11 movw  :   5 mul   :   0 
muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 ori   :   0 
out   :  27 pop   :   0 push  :   0 rcall :  52 ret   :  14 reti  :   2 
rjmp  :  60 rol   :   0 ror   :   0 sbc   :   0 sbci  :   2 sbi   :   7 
sbic  :   3 sbis  :   0 sbiw  :   7 sbr   :   0 sbrc  :   0 sbrs  :   0 
sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 ses   :   0 
set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  30 
std   :   3 sts   :  33 sub   :   0 subi  :   2 swap  :   4 tst   :   2 
wdr   :   2 
Instructions used: 40 out of 109 (36.7%)

ATmega48 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000480   1090     62   1152    4096  28.1%
[.dseg] 0x000100 0x0001b9      0     57     57     512  11.1%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 11 warnings
